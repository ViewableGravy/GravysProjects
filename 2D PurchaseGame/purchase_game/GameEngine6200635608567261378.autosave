enum GameState {
  World, 
  Interacting
}

public class GameEngine {
  final int RAD = 20;
  final int COLLIDEANGLE = 30;
  final int THREESIXTY = 360;
  boolean display = true;
  Player player;
  Merchant entity, entity2;
  Entity currentInteractingEntity = null;
  boolean keyReleased = true;
  boolean mouseReleased = true;
  ArrayList<Entity> entities;
  boolean keyClickReady = true;

  char key;
  float mousex, mousey;

  GameState GS = GameState.World;

  // declare all entities in the game engine (the setup of the world)
  public GameEngine(int wid, int hei) {
    player = new Player(wid/3, hei/2);
    entity = new Merchant(wid/2, hei/2, RAD, "entity 1", wid, hei);
    entity2 = new Merchant( wid/3, hei/3, RAD, "entity 2", wid, hei);
    entities = new ArrayList<Entity>();
    entities.add(entity);
    entities.add(entity2);
    textAlign(CENTER);
  }

  // in charge of displaying all world entities
  public void Display() {
    //display entities other than player
    //for (Entity object : entities) {
    // object.WorldFunctionality(this);
    //}

    for (int i = entities.size() - 1; i >= 0; i--) {
      entities.get(i).WorldFunctionality(this);
    }


    //display the player
    player.display(player.Direction(mousex, mousey));
  }

  void PlayerMovement() {
    if (keyPressed) {        //Move mechanics
      player.move(key);
    }
  }

  //currently only works with boomerang
  void UsePlayerHotbar() {
    if (keyReleased ) {
      keyClickReady = true;
    }
    if (keyClickReady) {
      if (keyPressed) {
        if (key == ' ') {
          keyClickReady = false;
          Entity temp = player.ThrowSelectedItem(mousex, mousey);
          if (temp != null) {
            entities.add(temp);
          }
        }
      }
    }
  }

  Entity RequestInteraction(Player plr, ArrayList<Entity> entities) {
    for (Entity entity : entities) {
      PVector EntClone = entity.pos.copy();
      PVector EntHeading = EntClone.sub(player.pos);
      int DegreeToEntity = round(map(atan2(headingent.y, headingent.x), PI, -PI, -180, 180)) ; 

      if (player.InteractDistance(DegreeToEntity,key)) {
        return entity.interact(key);
      } else {
        return null;
      }
    }
  }

  void DecideInteractEntity() {
    currentInteractingEntity = RequestInteraction(player,entities);
    currentInteractingEntity = player.InteractDistanceEntity(player.Direction(mousex, mousey), entities) ;
    if (currentInteractingEntity != null) {
      GS = GameState.Interacting;
    }
  }

  void InterfaceEntity() {
    try {
    currentInteractingEntity.keyReleased = keyReleased;
    currentInteractingEntity.mouseReleased = mouseReleased;
    
    // run the InteractionInterface (this should return an object with purchased items (or none if none purchased)
    boolean ShowInteractionInterface = currentInteractingEntity.ShowInteractionInterface(player, mousex, mousey);
    if (!ShowInteractionInterface) {
      currentInteractingEntity = null;
      GS = GameState.World;
    }
    } catch (Exception e) {
     println("object does not exist"); 
    }
  } 
  
  //Heads up display
  void HUD() {
    // information displaying //
    // just show items in a list in the middle top of screen
    int hei = 100;
    text("Copper: " + player.pocketMoney.copper + ", Peaches: " + player.pocketMoney.peach + ", Gold: " + player.pocketMoney.gold + ", Gravy: " + player.pocketMoney.gravy, width/2, 50);
    //println(frameRate);
    for (Entity obj : player.inventory) {
      text(obj.name, width/2, hei);
      hei += 15;
    }
  }

  // what does the game need to do every frame? Ideally this is not linked to the frameRate but for now it is.
  public void tick(float _mousex, float _mousey, char _key) {
    key = _key;
    mousex = _mousex;
    mousey = _mousey;
    
    

    switch (GS)  //<>//
    {
      // if the player is not interacting with an entity then show environment
      case World:
        HUD();
        Display(); //display all entities
        PlayerMovement(); //allow for character movement
        UsePlayerHotbar(); //utilise item in player hotbar slot
        DecideInteractEntity(); //check if the player is interacting with an entity
        break;
        //show the interaction of entity that player is interacting with
      case Interacting:
      //show interaction interface, also in charge of changing game state back to world
        InterfaceEntity();
        break;
    }
  }
}
